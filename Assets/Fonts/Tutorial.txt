Welcome to Pipeline Bakery!
Our job is to feed the very hungry processor.
He likes instructions.
To make the processor happy, we have to feed him instruction sets without hazards.
Let's start simple.
An arithmetic instruction has five parts:
Fetch (FETCH), the initial memory read.
Decode (DEC), where the processor selects what register to operate on.
Execute (EXE), where the processor's arithmetic logic unit performs mathematical operations.
Memory write (MEM), where the memory is written to after operations.

Write back (WB),  where the processor writes the result to a register after operations.
We create sequences of instructions to feed to the processor.
We assemble the instruction in an order called "pipelining."
We start by feeding the processor the first part of the first instruction.
Then, we feed him the second part of the first instruction AND the first part of the...
...second instruction. But there's a problem. See this instruction sequence?
In instruction #2, we do math in the register $t0.
But, if it's the same register we read from in the DEC step of instruction #3...
we get a hazard.
This is called a data hazard.
We try to use data from a register that doesn't have the correct value yet.
To fix this, we use a technique called data forwarding.
Tap each stage to forward the data from...
...the EXE stage of instruction #2 to the EXE stage of instruction #3.
Great. Now, let's look at another instruction set.
In this set, we branch based on whether or not the value in $t2 is zero.
However, we haven't determined the value of $t2 yet.
To fix this, we use branch prediction.
This means that we guess whether we will branch or not...
...based on our most recent branch decision.
The most common branch prediction scheme uses a two-bit branch predictor.
Touch the red pipeline stages to apply a two-bit branch predictor to the hazard.
Voila! Hazard resolved.
We don't run into the last type of hazard in the MIPS pipeline very often...
but here in the Pipeline Bakery, we can be short of resources.
Let's say we have the instruction sequence above.
The second and third instructions try to access the main memory at the same time.
But only one instruction can access the memory at any given time.
We fix this by simply adding more hardware.
Touch the red pipeline stages to add the appropriate hardware to resolve the hazard.
Very good. We've covered all of the different hazard categories now.
Of course, there are different ways to handle these hazards, but we'll discuss...
...that when the time comes.
When we get to the bakery, I'll give you three instructions at a time.
Find the hazard, tap the appropriate pipeline stages, and then tap the appopriate...
...resolution method in your toolbox.
Tap the screen when you're ready to play!